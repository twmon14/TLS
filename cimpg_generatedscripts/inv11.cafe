open INV .
	:goal{
		eq [tls :nonexec] : inv11(P:Protocol,P:Prin,P0:Prin,P:PubKey) = true .
	}

	:ind on (P:Protocol)

	:apply(si)
-- cert
	:apply(tc)

	:def csb1 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb1)

	:def csb2 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb2)

	:def csb3 = :ctf [ch?(M#Msg) .]

	:apply(csb3)

	:def csb4 = :ctf [sh?(M0#Msg) .]

	:apply(csb4)

	:def csb5 = :ctf {eq dst(M#Msg) = P#Prin .}

	:apply(csb5)

	:def csb6 = :ctf {eq crt(M0#Msg) = P#Prin .}

	:apply(csb6)

	:def csb7 = :ctf {eq src(M0#Msg) = P#Prin .}

	:apply(csb7)

	:def csb8 = :ctf {eq src(M#Msg) = dst(M0#Msg) .}

	:apply(csb8)

	:def csb9 = :ctf [choice(M0#Msg) \in list(M#Msg) .]

	:apply(csb9)

	:def csb10 = :ctf {eq b = P#Prin .}

	:apply(csb10)

	:def csb11 = :ctf {eq dst(M0#Msg) = a .}

	:apply(csb11)

	:def csb12 = :ctf {eq P#Prin  = intruder .}

	:apply(csb12)

	:def csb13 = :ctf {eq k(P#Prin) = k .}

	:apply(csb13)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	-- :def csb14 = :ctf {eq k(P#Prin) = P@PubKey .}

	-- :apply(csb14)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	-- :def csb15 = :ctf {eq k(P#Prin) = k .}

	-- :apply(csb15)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	-- :def csb16 = :ctf {eq dst(M0#Msg) = P@Prin .}

	-- :apply(csb16)

	-- :def csb17 = :ctf {eq P0@Prin  = P#Prin .}

	-- :apply(csb17)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	*** Goal`1-1-1-1-1-1-1-1-1-1-1-1-2  -  inv11(cert(P#Protocol,P#Prin,M#Msg,M0#Msg),P@Prin,P0@Prin,P@PubKey) - Success
	-- :def csb18 = :ctf {eq P#Prin  = P0@Prin .}

	-- :apply(csb18)

		*** Goal`1-1-1-1-1-1-1-1-1-1-1-1-2-1 Success by implication and reduction.
		:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey
    <- P@PubKey ;}

		:apply (rd)

		*** Goal`1-1-1-1-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
		:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey
    <- P@PubKey ;}

		:apply (rd)

	*** Goal`1-1-1-1-1-1-1-1-1-1-1-2  -  inv11(cert(P#Protocol,P#Prin,M#Msg,M0#Msg),P@Prin,P0@Prin,P@PubKey) - Success
	-- g

		*** Goal`1-1-1-1-1-1-1-1-1-1-1-2-1 Success by implication and reduction.
		:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey
    <- P@PubKey ;}

		:apply (rd)

		*** Goal`1-1-1-1-1-1-1-1-1-1-1-2-2 Success by implication and reduction.
		:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey
    <- P@PubKey ;}

		:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

	-- :imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    -- P@PubKey ;}

	-- :apply (rd)

-- cfin
	:apply(tc)

	:def csb20 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb20)

	:def csb21 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb21)

	:def csb22 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb22)

	:def csb23 = :ctf [M2#Msg \in nw(P#Protocol) .]

	:apply(csb23)

	:def csb24 = :ctf [ch?(M#Msg) .]

	:apply(csb24)

	:def csb25 = :ctf [sh?(M0#Msg) .]

	:apply(csb25)

	:def csb26 = :ctf [ct?(M1#Msg) .]

	:apply(csb26)

	:def csb27 = :ctf [kx?(M2#Msg) .]

	:apply(csb27)

	:def csb28 = :ctf {eq crt(M#Msg) = P#Prin .}

	:apply(csb28)

	:def csb29 = :ctf {eq src(M#Msg) = P#Prin .}

	:apply(csb29)

	:def csb30 = :ctf {eq crt(M2#Msg) = P#Prin .}

	:apply(csb30)

	:def csb31 = :ctf {eq src(M2#Msg) = P#Prin .}

	:apply(csb31)

	:def csb32 = :ctf {eq dst(M2#Msg) = dst(M#Msg) .}

	:apply(csb32)

	:def csb33 = :ctf {eq src(M0#Msg) = dst(M#Msg) .}

	:apply(csb33)

	:def csb34 = :ctf {eq dst(M0#Msg) = P#Prin .}

	:apply(csb34)

	:def csb35 = :ctf {eq src(M1#Msg) = dst(M#Msg) .}

	:apply(csb35)

	:def csb36 = :ctf {eq dst(M1#Msg) = P#Prin .}

	:apply(csb36)

	:def csb37 = :ctf [choice(M0#Msg)\in list(M#Msg) .]

	:apply(csb37)

	:def csb38 = :ctf {eq server(cert(M1#Msg)) = dst(M#Msg) .}

	:apply(csb38)

	:def csb39 = :ctf {eq sig(cert(M1#Msg)) = sig(ca,dst(M#Msg),pubkey(cert(M1#Msg))) .}

	:apply(csb39)

	:def csb40 = :ctf {eq epms(M2#Msg) = epms(pubkey(cert(M1#Msg)),pms(P#Prin,dst(M#Msg),S#Secret)) .}

	:apply(csb40)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb41 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb41)

	:def csb42 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb42)

	:def csb43 = :ctf [ch2?(M#Msg) .]

	:apply(csb43)

	:def csb44 = :ctf [sh2?(M0#Msg) .]

	:apply(csb44)

	:def csb45 = :ctf {eq crt(M#Msg) = P#Prin .}

	:apply(csb45)

	:def csb46 = :ctf {eq src(M#Msg) = P#Prin .}

	:apply(csb46)

	:def csb47 = :ctf {eq src(M0#Msg) = dst(M#Msg) .}

	:apply(csb47)

	:def csb48 = :ctf {eq dst(M0#Msg) = P#Prin .}

	:apply(csb48)

	:def csb49 = :ctf {eq sid(M#Msg) = sid(M0#Msg) .}

	:apply(csb49)

	:def csb50 = :ctf {eq choice(ss(P#Protocol,P#Prin,dst(M#Msg),sid(
    M0#Msg))) = choice(M0#Msg) .}

	:apply(csb50)

	:def csb51 = :ctf {eq pms(ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)))
    = pms(P#Prin,dst(M#Msg),S#Secret) .}

	:apply(csb51)

	:def csb52 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb52)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb53 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb53)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb54 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb54)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb55 = :ctf [R#Rand \in ur(P#Protocol) .]

	:apply(csb55)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb56 = :ctf [R#Rand \in ur(P#Protocol) .]

	:apply(csb56)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb57 = :ctf {eq pms(ss(P#Protocol,P#Prin,P0#Prin,S#Sid)) = pms(
    P#Prin,P0#Prin,S#Secret) .}

	:apply(csb57)

	:def csb58 = :ctf {eq ss(P#Protocol,P#Prin,P0#Prin,S#Sid) = none .}

	:apply(csb58)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb59 = :ctf {eq ss(P#Protocol,P#Prin,P0#Prin,S#Sid) = none .}

	:apply(csb59)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb60 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb60)

	:def csb61 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb61)

	:def csb62 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb62)

	:def csb63 = :ctf [M2#Msg \in nw(P#Protocol) .]

	:apply(csb63)

	:def csb64 = :ctf [M3#Msg \in nw(P#Protocol) .]

	:apply(csb64)

	:def csb65 = :ctf [M4#Msg \in nw(P#Protocol) .]

	:apply(csb65)

	:def csb66 = :ctf [ch?(M#Msg) .]

	:apply(csb66)

	:def csb67 = :ctf [sh?(M0#Msg) .]

	:apply(csb67)

	:def csb68 = :ctf [ct?(M1#Msg) .]

	:apply(csb68)

	:def csb69 = :ctf [kx?(M2#Msg) .]

	:apply(csb69)

	:def csb70 = :ctf [cf?(M3#Msg) .]

	:apply(csb70)

	:def csb71 = :ctf [sf?(M4#Msg) .]

	:apply(csb71)

	:def csb72 = :ctf {eq crt(M#Msg) = P#Prin .}

	:apply(csb72)

	:def csb73 = :ctf {eq src(M#Msg) = P#Prin .}

	:apply(csb73)

	:def csb74 = :ctf {eq crt(M2#Msg) = P#Prin .}

	:apply(csb74)

	:def csb75 = :ctf {eq src(M2#Msg) = P#Prin .}

	:apply(csb75)

	:def csb76 = :ctf {eq dst(M2#Msg) = dst(M#Msg) .}

	:apply(csb76)

	:def csb77 = :ctf {eq crt(M3#Msg) = P#Prin .}

	:apply(csb77)

	:def csb78 = :ctf {eq src(M3#Msg) = P#Prin .}

	:apply(csb78)

	:def csb79 = :ctf {eq dst(M3#Msg) = dst(M#Msg) .}

	:apply(csb79)

	:def csb80 = :ctf {eq src(M0#Msg) = dst(M#Msg) .}

	:apply(csb80)

	:def csb81 = :ctf {eq dst(M0#Msg) = P#Prin .}

	:apply(csb81)

	:def csb82 = :ctf {eq src(M1#Msg) = dst(M#Msg) .}

	:apply(csb82)

	:def csb83 = :ctf {eq dst(M1#Msg) = P#Prin .}

	:apply(csb83)

	:def csb84 = :ctf {eq src(M4#Msg) = dst(M#Msg) .}

	:apply(csb84)

	:def csb85 = :ctf {eq dst(M4#Msg) = P#Prin .}

	:apply(csb85)

	:def csb86 = :ctf [choice(M0#Msg)\in list(M#Msg) .]

	:apply(csb86)

	:def csb87 = :ctf {eq server(cert(M1#Msg)) = dst(M#Msg) .}

	:apply(csb87)

	:def csb88 = :ctf {eq sig(cert(M1#Msg)) = sig(ca,dst(M#Msg),pubkey(
    cert(M1#Msg))) .}

	:apply(csb88)

	:def csb89 = :ctf {eq epms(M2#Msg) = epms(pubkey(cert(M1#Msg)),pms(
    P#Prin,dst(M#Msg),S#Secret)) .}

	:apply(csb89)

	:def csb90 = :ctf {eq ecfin(M3#Msg) = ecfin(k(P#Prin,pms(epms(M2#Msg)),
    rand(M#Msg),rand(M0#Msg)),cfin(P#Prin,dst(M#Msg),sid(M0#Msg),list(M#Msg),
    choice(M0#Msg),rand(M#Msg),rand(M0#Msg),pms(epms(M2#Msg)))) .}

	:apply(csb90)

	:def csb91 = :ctf {eq esfin(M4#Msg) = esfin(k(dst(M#Msg),pms(epms(
    M2#Msg)),rand(M#Msg),rand(M0#Msg)),sfin(P#Prin,dst(M#Msg),sid(M0#Msg),list(
    M#Msg),choice(M0#Msg),rand(M#Msg),rand(M0#Msg),pms(epms(M2#Msg)))) .}

	:apply(csb91)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb92 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb92)

	:def csb93 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb93)

	:def csb94 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb94)

	:def csb95 = :ctf [M2#Msg \in nw(P#Protocol) .]

	:apply(csb95)

	:def csb96 = :ctf [ch2?(M#Msg) .]

	:apply(csb96)

	:def csb97 = :ctf [sh2?(M0#Msg) .]

	:apply(csb97)

	:def csb98 = :ctf [cf2?(M1#Msg) .]

	:apply(csb98)

	:def csb99 = :ctf [sf2?(M2#Msg) .]

	:apply(csb99)

	:def csb100 = :ctf {eq crt(M#Msg) = P#Prin .}

	:apply(csb100)

	:def csb101 = :ctf {eq src(M#Msg) = P#Prin .}

	:apply(csb101)

	:def csb102 = :ctf {eq crt(M1#Msg) = P#Prin .}

	:apply(csb102)

	:def csb103 = :ctf {eq src(M1#Msg) = P#Prin .}

	:apply(csb103)

	:def csb104 = :ctf {eq dst(M1#Msg) = dst(M#Msg) .}

	:apply(csb104)

	:def csb105 = :ctf {eq src(M0#Msg) = dst(M#Msg) .}

	:apply(csb105)

	:def csb106 = :ctf {eq dst(M0#Msg) = P#Prin .}

	:apply(csb106)

	:def csb107 = :ctf {eq src(M2#Msg) = dst(M#Msg) .}

	:apply(csb107)

	:def csb108 = :ctf {eq dst(M2#Msg) = P#Prin .}

	:apply(csb108)

	:def csb109 = :ctf {eq sid(M#Msg) = sid(M0#Msg) .}

	:apply(csb109)

	:def csb110 = :ctf {eq choice(ss(P#Protocol,P#Prin,dst(M#Msg),sid(
    M0#Msg))) = choice(M0#Msg) .}

	:apply(csb110)

	:def csb111 = :ctf {eq pms(ss(P#Protocol,P#Prin,dst(M#Msg),sid(
    M0#Msg))) = pms(P#Prin,dst(M#Msg),S#Secret) .}

	:apply(csb111)

	:def csb112 = :ctf {eq ecfin2(M1#Msg) = ecfin2(k(P#Prin,pms(P#Prin,dst(
    M#Msg),S#Secret),rand(M#Msg),rand(M0#Msg)),cfin2(P#Prin,dst(M#Msg),sid(
    M0#Msg),choice(M0#Msg),rand(M#Msg),rand(M0#Msg),pms(P#Prin,dst(M#Msg),
    S#Secret))) .}

	:apply(csb112)

	:def csb113 = :ctf {eq esfin2(M2#Msg) = esfin2(k(dst(M#Msg),pms(P#Prin,
    dst(M#Msg),S#Secret),rand(M#Msg),rand(M0#Msg)),sfin2(P#Prin,dst(M#Msg),sid(
    M0#Msg),choice(M0#Msg),rand(M#Msg),rand(M0#Msg),pms(P#Prin,dst(M#Msg),
    S#Secret))) .}

	:apply(csb113)

	:def csb114 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb114)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb115 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb115)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb116 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb116)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb117 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb117)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb118 = :ctf {eq ss(P#Protocol,P#Prin,dst(M#Msg),sid(M0#Msg)) =
    none .}

	:apply(csb118)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb119 = :ctf [S#Sig \in csig(nw(P#Protocol)) .]

	:apply(csb119)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb120 = :ctf [E#EncCFin \in cecfin(nw(P#Protocol)) .]

	:apply(csb120)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb121 = :ctf [P#Pms \in cpms(nw(P#Protocol)) .]

	:apply(csb121)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb122 = :ctf [E#EncCFin2 \in cecfin2(nw(P#Protocol)) .]

	:apply(csb122)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb123 = :ctf [P#Pms \in cpms(nw(P#Protocol)) .]

	:apply(csb123)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb124 = :ctf [E#EncPms \in cepms(nw(P#Protocol)) .]

	:apply(csb124)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb125 = :ctf [P#Pms \in cpms(nw(P#Protocol)) .]

	:apply(csb125)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb126 = :ctf [E#EncSFin \in cesfin(nw(P#Protocol)) .]

	:apply(csb126)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb127 = :ctf [P#Pms \in cpms(nw(P#Protocol)) .]

	:apply(csb127)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb128 = :ctf [E#EncSFin2 \in cesfin2(nw(P#Protocol)) .]

	:apply(csb128)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb129 = :ctf [P#Pms \in cpms(nw(P#Protocol)) .]

	:apply(csb129)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:apply (rd)

	:apply(tc)

	:def csb130 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb130)

	:def csb131 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb131)

	:def csb132 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb132)

	:def csb133 = :ctf [S#Secret \in us(P#Protocol) .]

	:apply(csb133)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb134 = :ctf [ch?(M#Msg) .]

	:apply(csb134)

	:def csb135 = :ctf [sh?(M0#Msg) .]

	:apply(csb135)

	:def csb136 = :ctf [ct?(M1#Msg) .]

	:apply(csb136)

	:def csb137 = :ctf {eq crt(M#Msg) = P#Prin .}

	:apply(csb137)

	:def csb138 = :ctf {eq src(M#Msg) = P#Prin .}

	:apply(csb138)

	:def csb139 = :ctf {eq src(M0#Msg) = dst(M#Msg) .}

	:apply(csb139)

	:def csb140 = :ctf {eq dst(M0#Msg) = P#Prin .}

	:apply(csb140)

	:def csb141 = :ctf {eq src(M1#Msg) = dst(M#Msg) .}

	:apply(csb141)

	:def csb142 = :ctf {eq dst(M1#Msg) = P#Prin .}

	:apply(csb142)

	:def csb143 = :ctf [choice(M0#Msg)\in list(M#Msg) .]

	:apply(csb143)

	:def csb144 = :ctf {eq server(cert(M1#Msg)) = dst(M#Msg) .}

	:apply(csb144)

	:def csb145 = :ctf {eq sig(cert(M1#Msg)) = sig(ca,dst(M#Msg),pubkey(
    cert(M1#Msg))) .}

	:apply(csb145)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb146 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb146)

	:def csb147 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb147)

	:def csb148 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb148)

	:def csb149 = :ctf [M2#Msg \in nw(P#Protocol) .]

	:apply(csb149)

	:def csb150 = :ctf [M3#Msg \in nw(P#Protocol) .]

	:apply(csb150)

	:def csb151 = :ctf [ch?(M#Msg) .]

	:apply(csb151)

	:def csb152 = :ctf [sh?(M0#Msg) .]

	:apply(csb152)

	:def csb153 = :ctf [ct?(M1#Msg) .]

	:apply(csb153)

	:def csb154 = :ctf [kx?(M2#Msg) .]

	:apply(csb154)

	:def csb155 = :ctf [cf?(M3#Msg) .]

	:apply(csb155)

	:def csb156 = :ctf {eq crt(M0#Msg) = P#Prin .}

	:apply(csb156)

	:def csb157 = :ctf {eq src(M0#Msg) = P#Prin .}

	:apply(csb157)

	:def csb158 = :ctf {eq crt(M1#Msg) = P#Prin .}

	:apply(csb158)

	:def csb159 = :ctf {eq src(M1#Msg) = P#Prin .}

	:apply(csb159)

	:def csb160 = :ctf {eq dst(M1#Msg) = dst(M0#Msg) .}

	:apply(csb160)

	:def csb161 = :ctf {eq src(M#Msg) = dst(M0#Msg) .}

	:apply(csb161)

	:def csb162 = :ctf {eq dst(M#Msg) = P#Prin .}

	:apply(csb162)

	:def csb163 = :ctf {eq src(M2#Msg) = dst(M0#Msg) .}

	:apply(csb163)

	:def csb164 = :ctf {eq dst(M2#Msg) = P#Prin .}

	:apply(csb164)

	:def csb165 = :ctf {eq src(M3#Msg) = dst(M0#Msg) .}

	:apply(csb165)

	:def csb166 = :ctf {eq dst(M3#Msg) = P#Prin .}

	:apply(csb166)

	:def csb167 = :ctf [choice(M0#Msg)\in list(M#Msg) .]

	:apply(csb167)

	:def csb168 = :ctf {eq cert(M1#Msg) = cert(P#Prin,k(P#Prin),sig(ca,
    P#Prin,k(P#Prin))) .}

	:apply(csb168)

	:def csb169 = :ctf {eq k(epms(M2#Msg)) = k(P#Prin) .}

	:apply(csb169)

	:def csb170 = :ctf {eq ecfin(M3#Msg) = ecfin(k(dst(M0#Msg),pms(epms(
    M2#Msg)),rand(M#Msg),rand(M0#Msg)),cfin(dst(M0#Msg),P#Prin,sid(M0#Msg),
    list(M#Msg),choice(M0#Msg),rand(M#Msg),rand(M0#Msg),pms(epms(M2#Msg)))) .}

	:apply(csb170)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb171 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb171)

	:def csb172 = :ctf [M0#Msg \in nw(P#Protocol) .]

	:apply(csb172)

	:def csb173 = :ctf [M1#Msg \in nw(P#Protocol) .]

	:apply(csb173)

	:def csb174 = :ctf [ch2?(M#Msg) .]

	:apply(csb174)

	:def csb175 = :ctf [sh2?(M0#Msg) .]

	:apply(csb175)

	:def csb176 = :ctf [cf2?(M1#Msg) .]

	:apply(csb176)

	:def csb177 = :ctf {eq crt(M0#Msg) = P#Prin .}

	:apply(csb177)

	:def csb178 = :ctf {eq src(M0#Msg) = P#Prin .}

	:apply(csb178)

	:def csb179 = :ctf {eq src(M#Msg) = dst(M0#Msg) .}

	:apply(csb179)

	:def csb180 = :ctf {eq dst(M#Msg) = P#Prin .}

	:apply(csb180)

	:def csb181 = :ctf {eq src(M1#Msg) = dst(M0#Msg) .}

	:apply(csb181)

	:def csb182 = :ctf {eq dst(M1#Msg) = P#Prin .}

	:apply(csb182)

	:def csb183 = :ctf {eq sid(M#Msg) = sid(M0#Msg) .}

	:apply(csb183)

	:def csb184 = :ctf {eq choice(ss(P#Protocol,dst(M0#Msg),P#Prin,sid(
    M0#Msg))) = choice(M0#Msg) .}

	:apply(csb184)

	:def csb185 = :ctf {eq ecfin2(M1#Msg) = ecfin2(k(dst(M0#Msg),pms(ss(
    P#Protocol,dst(M0#Msg),P#Prin,sid(M0#Msg))),rand(M#Msg),rand(M0#Msg)),
    cfin2(dst(M0#Msg),P#Prin,sid(M0#Msg),choice(M0#Msg),rand(M#Msg),rand(
    M0#Msg),pms(ss(P#Protocol,dst(M0#Msg),P#Prin,sid(M0#Msg))))) .}

	:apply(csb185)

	:def csb186 = :ctf {eq ss(P#Protocol,dst(M0#Msg),P#Prin,sid(M0#Msg)) =
    none .}

	:apply(csb186)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb187 = :ctf {eq ss(P#Protocol,dst(M0#Msg),P#Prin,sid(M0#Msg)) =
    none .}

	:apply(csb187)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb188 = :ctf {eq ss(P#Protocol,dst(M0#Msg),P#Prin,sid(M0#Msg)) =
    none .}

	:apply(csb188)

	*** The corresponding proof score was not present.
	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	*** The corresponding proof score was not present.
	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb189 = :ctf [R#Rand \in ur(P#Protocol) .]

	:apply(csb189)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb190 = :ctf [S#Sid \in ui(P#Protocol) .]

	:apply(csb190)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb191 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb191)

	:def csb192 = :ctf [ch?(M#Msg) .]

	:apply(csb192)

	:def csb193 = :ctf {eq dst(M#Msg) = P#Prin .}

	:apply(csb193)

	:def csb194 = :ctf [C#Choice \in list(M#Msg) .]

	:apply(csb194)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:apply(tc)

	:def csb195 = :ctf [R#Rand \in ur(P#Protocol) .]

	:apply(csb195)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:def csb196 = :ctf [M#Msg \in nw(P#Protocol) .]

	:apply(csb196)

	:def csb197 = :ctf [ch2?(M#Msg) .]

	:apply(csb197)

	:def csb198 = :ctf {eq dst(M#Msg) = P#Prin .}

	:apply(csb198)

	*** Goal`28-1-2-1-1-1  -  inv11(shello2(P#Protocol,P#Prin,R#Rand,M#Msg),P@Prin,P0@Prin,P@PubKey) - Success
	:def csb199 = :ctf {eq intruder  = P0@Prin .}

	:apply(csb199)

		*** Goal`28-1-2-1-1-1-1 Success by reduction
		-- :apply (rd)

		*** Goal`28-1-2-1-1-1-2  -  inv11(shello2(P#Protocol,P#Prin,R#Rand,M#Msg),P@Prin,P0@Prin,P@PubKey) - Success
		:def csb200 = :ctf {eq none  = ss(P#Protocol,src(M#Msg),P#Prin,
    sid(M#Msg)) .}

		:apply(csb200)

			*** Goal`28-1-2-1-1-1-2-1 Success by implication and reduction.
			:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ;
    P:PubKey <- P@PubKey ;}

			:apply (rd)

			*** Goal`28-1-2-1-1-1-2-2 Success by implication and reduction.
			:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ;
    P:PubKey <- P@PubKey ;}

			:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)

	:imp [tls] by {P0:Prin <- P0@Prin ; P:Prin <- P@Prin ; P:PubKey <-
    P@PubKey ;}

	:apply (rd)


close

