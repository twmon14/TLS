open INV .
	:goal{
		eq [tls :nonexec] : inv17(fakeShello(P:Protocol,P:Prin,P5:Prin,R:Rand,S:Sid,C:Choice),P4:Prin,P3:Prin,P2:Prin,P1:Prin,P0:Prin,R1:Rand,R0:Rand,L:ListOfChoices,C0:Choice,S0:Sid,S:Secret,P:PubKey) = true .
	}

	:apply(tc)

	:def csb1 = :ctf [ct(P1@Prin,P3@Prin,P4@Prin,cert(P3@Prin,P@PubKey,sig(ca,P3@Prin,P@PubKey)))\in nw(P@Protocol) .]

	:apply(csb1)

	:def csb2 = :ctf [sf(P0@Prin,P3@Prin,P4@Prin,esfin(k(P3@Prin,pms(P4@Prin,P3@Prin,S@Secret),R1@Rand,R0@Rand),sfin(P4@Prin,P3@Prin,S0@Sid,L@ListOfChoices,C0@Choice,R1@Rand,R0@Rand,pms(P4@Prin,P3@Prin,S@Secret))))\in nw(P@Protocol) .]

	:apply(csb2)

	:def csb3 = :ctf [sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) .]

	:apply(csb3)

	:def csb4 = :ctf [sh(P2@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) .]

	:apply(csb4)

	:def csb5 = :ctf [ct(P3@Prin,P3@Prin,P4@Prin,cert(P3@Prin,P@PubKey,sig(ca,P3@Prin,P@PubKey)))\in nw(P@Protocol) .]

	:apply(csb5)

	*** The corresponding proof score was not present.
	:apply (rd)

	:postpone .

	:def csb6 = :ctf [sf(P3@Prin,P3@Prin,P4@Prin,esfin(k(P3@Prin,pms(P4@Prin,P3@Prin,S@Secret),R1@Rand,R0@Rand),sfin(P4@Prin,P3@Prin,S0@Sid,L@ListOfChoices,C0@Choice,R1@Rand,R0@Rand,pms(P4@Prin,P3@Prin,S@Secret))))\in nw(P@Protocol) .]

	:apply(csb6)

	:postpone .

	:postpone .

	:def csb7 = :ctf {eq C0@Choice  = C@Choice .}

	:apply(csb7)

	:def csb8 = :ctf {eq P4@Prin  = P5@Prin .}

	:apply(csb8)

	:def csb9 = :ctf {eq P3@Prin  = P@Prin .}

	:apply(csb9)

	:def csb10 = :ctf {eq R0@Rand  = R@Rand .}

	:apply(csb10)

	:def csb11 = :ctf {eq S0@Sid  = S@Sid .}

	:apply(csb11)

	:def csb12 = :ctf {eq P5@Prin  = intruder .}

	:apply(csb12)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb13 = :ctf {eq P@Prin  = intruder .}

	:apply(csb13)

	:def csb14 = :ctf {eq P2@Prin  = intruder .}

	:apply(csb14)

	:def csb15 = :ctf {eq ct(P1@Prin,intruder,P5@Prin,cert(intruder,P@PubKey,sig(ca,intruder,P@PubKey)))\in nw(P@Protocol) = true .}

	:apply(csb15)

	:postpone .

	:postpone .

	:postpone .

	:def csb16 = :ctf {eq sf(P0@Prin,P@Prin,P5@Prin,esfin(k(P@Prin,pms(P5@Prin,P@Prin,S@Secret),R1@Rand,R@Rand),sfin(P5@Prin,P@Prin,S@Sid,L@ListOfChoices,C@Choice,R1@Rand,R@Rand,pms(P5@Prin,P@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb16)

	:def csb17 = :ctf {eq P2@Prin  = intruder .}

	:apply(csb17)

	:def csb18 = :ctf {eq ct(P@Prin,P@Prin,P5@Prin,cert(P@Prin,P@PubKey,sig(ca,P@Prin,P@PubKey)))\in nw(P@Protocol) = true .}

	:apply(csb18)

	:def csb19 = :ctf {eq sf(P@Prin,P@Prin,P5@Prin,esfin(k(P@Prin,pms(P5@Prin,P@Prin,S@Secret),R1@Rand,R@Rand),sfin(P5@Prin,P@Prin,S@Sid,L@ListOfChoices,C@Choice,R1@Rand,R@Rand,pms(P5@Prin,P@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb19)

	:def csb20 = :ctf {eq ct(P1@Prin,P@Prin,P5@Prin,cert(P@Prin,P@PubKey,sig(ca,P@Prin,P@PubKey)))\in nw(P@Protocol) = true .}

	:apply(csb20)

	:def csb21 = :ctf {eq sh(intruder,P@Prin,P5@Prin,R@Rand,S@Sid,C@Choice)\in nw(P@Protocol) = true .}

	:apply(csb21)

	:def csb22 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb22)

	:postpone .

	:def csb23 = :ctf {eq sh(P@Prin,P@Prin,P5@Prin,R@Rand,S@Sid,C@Choice)\in nw(P@Protocol) = true .}

	:apply(csb23)

	:def csb24 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb24)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:postpone .

	:def csb25 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb25)

	:postpone .

	:def csb26 = :ctf {eq sh(P@Prin,P@Prin,P5@Prin,R@Rand,S@Sid,C@Choice)\in nw(P@Protocol) = true .}

	:apply(csb26)

	:def csb27 = :ctf [sh(P2@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) .]

	:apply(csb27)

	:def csb28 = :ctf {eq sf(P3@Prin,P3@Prin,P4@Prin,esfin(k(P3@Prin,pms(P4@Prin,P3@Prin,S@Secret),R1@Rand,R0@Rand),sfin(P4@Prin,P3@Prin,S0@Sid,L@ListOfChoices,C0@Choice,R1@Rand,R0@Rand,pms(P4@Prin,P3@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb28)

	:def csb29 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb29)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb30 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb30)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb31 = :ctf {eq sf(P3@Prin,P3@Prin,P4@Prin,esfin(k(P3@Prin,pms(P4@Prin,P3@Prin,S@Secret),R1@Rand,R0@Rand),sfin(P4@Prin,P3@Prin,S0@Sid,L@ListOfChoices,C0@Choice,R1@Rand,R0@Rand,pms(P4@Prin,P3@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb31)

	:def csb32 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb32)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb33 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb33)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:postpone .

	:postpone .

	:def csb34 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb34)

	:postpone .

	:def csb35 = :ctf {eq sh(P@Prin,P@Prin,P5@Prin,R@Rand,S@Sid,C@Choice)\in nw(P@Protocol) = true .}

	:apply(csb35)

	:def csb36 = :ctf [sh(P2@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) .]

	:apply(csb36)

	:def csb37 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb37)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb38 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb38)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:postpone .

	:def csb39 = :ctf {eq sf(P@Prin,P@Prin,P5@Prin,esfin(k(P@Prin,pms(P5@Prin,P@Prin,S@Secret),R1@Rand,R@Rand),sfin(P5@Prin,P@Prin,S@Sid,L@ListOfChoices,C@Choice,R1@Rand,R@Rand,pms(P5@Prin,P@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb39)

	:def csb40 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb40)

	:postpone .

	:postpone .

	:def csb41 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb41)

	:postpone .

	:postpone .

	:def csb42 = :ctf {eq ct(P@Prin,P@Prin,P5@Prin,cert(P@Prin,P@PubKey,sig(ca,P@Prin,P@PubKey)))\in nw(P@Protocol) = true .}

	:apply(csb42)

	:def csb43 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb43)

	:postpone .

	:def csb44 = :ctf {eq sh(P@Prin,P@Prin,P5@Prin,R@Rand,S@Sid,C@Choice)\in nw(P@Protocol) = true .}

	:apply(csb44)

	:def csb45 = :ctf [sh(P2@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) .]

	:apply(csb45)

	:def csb46 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb46)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:def csb47 = :ctf {eq sh(P3@Prin,P3@Prin,P4@Prin,R0@Rand,S0@Sid,C0@Choice)\in nw(P@Protocol) = true .}

	:apply(csb47)

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)

	:postpone .

	:def csb48 = :ctf {eq sf(P@Prin,P@Prin,P5@Prin,esfin(k(P@Prin,pms(P5@Prin,P@Prin,S@Secret),R1@Rand,R@Rand),sfin(P5@Prin,P@Prin,S@Sid,L@ListOfChoices,C@Choice,R1@Rand,R@Rand,pms(P5@Prin,P@Prin,S@Secret))))\in nw(P@Protocol) = true .}

	:apply(csb48)

	:def csb49 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb49)

	:postpone .

	:postpone .

	:def csb50 = :ctf {eq pms(P5@Prin,P@Prin,S@Secret)\in cpms(nw(P@Protocol)) = true .}

	:apply(csb50)

	:postpone .

	:postpone .

	:postpone .

	:postpone .

	:postpone .

	:postpone .

	:postpone .

	:postpone .

	*** The corresponding proof score was not present.
	:apply (rd)

	*** The corresponding proof score was not present.
	:apply (rd)


close

