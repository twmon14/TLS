fmod SOUP{E :: TRIV} is
    sort Soup{E} .
    subsort E$Elt < Soup{E} .
    op emp : -> Soup{E} [ctor] .
    op _ _ : Soup{E} Soup{E} -> Soup{E} [ctor assoc comm id: emp] .
    op _\in_ : E$Elt Soup{E} -> Bool .
    var X : E$Elt .
    var S : Soup{E} .
    eq X X = X . *** idempotency
    eq X \in X S = true .
    eq X \in S = false [owise] .
endfm

fmod PRIN is
    sort Prin .
    ops a b intr ca : -> Prin [ctor] .
endfm

view Prin from TRIV to PRIN is
    sort Elt to Prin .
endv

fmod PRIN-SOUP is
    pr SOUP{Prin} .
endfm

fmod RAND is
    sort Rand .
    ops cr sr cr1 sr1 : -> Rand [ctor] .
endfm

view Rand from TRIV to RAND is
    sort Elt to Rand .
endv

fmod RAND-SOUP is
    pr SOUP{Rand} .
endfm

fmod CHOICE is
    sort Choice .
    ops c empty : -> Choice [ctor] .
endfm

view Choice from TRIV to CHOICE is
    sort Elt to Choice .
endv

fmod CHOICE-SOUP is
    pr SOUP{Choice} .
endfm

fmod LISTOFCHOICES is
    pr CHOICE .
    sort ListOfChoices .
    op _\in_ : Choice ListOfChoices -> Bool .
    ops l empty : -> ListOfChoices [ctor] .
endfm

view ListOfChoices from TRIV to LISTOFCHOICES is
    sort Elt to ListOfChoices .
endv

fmod LISTOFCHOICES-SOUP is
    pr SOUP{ListOfChoices} .
endfm

fmod SID is
    sort Sid .
    ops i empty : -> Sid [ctor] .
endfm

view Sid from TRIV to SID is
    sort Elt to Sid .
endv

fmod SID-SOUP is
    pr SOUP{Sid} .
endfm

fmod SECRET is
    sort Secret .
    ops s empty : -> Secret [ctor] .
endfm

view Secret from TRIV to SECRET is
    sort Elt to Secret .
endv

fmod SECRET-SOUP is
    pr SOUP{Secret} .
endfm

fmod PMS is
    pr PRIN .
    pr SECRET .
    sort Pms .
    op pms : Prin Prin Secret -> Pms [ctor] .
    op client : Pms -> Prin .
    op server : Pms -> Prin .
    op secret : Pms -> Secret .

    var PMS : Pms .
    vars P Q : Prin .
    var S : Secret .
    eq client(pms(P,Q,S)) = P .
    eq server(pms(P,Q,S)) = Q .
    eq secret(pms(P,Q,S)) = S .
endfm

view Pms from TRIV to PMS is
    sort Elt to Pms .
endv

fmod PMS-SOUP is
    pr SOUP{Pms} .
endfm

fmod PUBLICKEY is
  pr PRIN .
  sort PubKey .
  op k : Prin -> PubKey .
  op owner : PubKey -> Prin .
  var P : Prin .
  eq owner(k(P)) = P .   
endfm

view PubKey from TRIV to PUBLICKEY is
    sort Elt to PubKey .
endv

fmod PUBLICKEY-SOUP is
  pr SOUP{PubKey} .
endfm

fmod SIGNATURE is
  pr PRIN .
  pr PUBLICKEY .
  sort Sig .
  op sig : Prin Prin PubKey -> Sig .
  op signer : Sig -> Prin .
  op server : Sig -> Prin .
  op pubkey : Sig -> PubKey .

  var G : Sig .
  vars P Q : Prin .
  var PK : PubKey .
  eq signer(sig(P,Q,PK)) = P .
  eq server(sig(P,Q,PK)) = Q .
  eq pubkey(sig(P,Q,PK)) = PK .
endfm

view Sig from TRIV to SIGNATURE is
    sort Elt to Sig .
endv

fmod SIGNATURE-SOUP is
  pr SOUP{Sig} .
endfm

fmod CERTIFICATE is
  pr PRIN .
  pr PUBLICKEY .
  pr SIGNATURE .
  sort Cert .
  op cert : Prin PubKey Sig -> Cert .
  op server : Cert -> Prin .
  op pubkey : Cert -> PubKey .
  op sig    : Cert -> Sig .

  var C : Cert .
  vars P A1 A2 : Prin .
  vars PK PK1 PK2 : PubKey .
  vars G G1 G2 : Sig .
  eq server(cert(P,PK,G)) = P .
  eq pubkey(cert(P,PK,G)) = PK .
  eq sig(cert(P,PK,G)) = G .
endfm

view Cert from TRIV to CERTIFICATE is
  sort Elt to Cert .
endv

fmod CERTIFICATE-SOUP is
  pr SOUP{Cert} .
endfm

fmod KEY is
  pr PRIN .
  pr PMS .
  pr RAND .
  sort Key .

  op k : Prin Pms Rand Rand -> Key .
  op prin  : Key -> Prin .
  op pms   : Key -> Pms .
  op crand : Key -> Rand .
  op srand : Key -> Rand .

  var K : Key .
  var P : Prin .
  var PMS : Pms .
  vars CR SR : Rand .
  eq prin(k(P,PMS,CR,SR)) = P .
  eq pms(k(P,PMS,CR,SR)) = PMS .
  eq crand(k(P,PMS,CR,SR)) = CR .
  eq srand(k(P,PMS,CR,SR)) = SR .
endfm

view Key from TRIV to KEY is
    sort Elt to Key .
endv

fmod KEY-SOUP is
  pr SOUP{Key} .
endfm

fmod CFINISH is
  pr PRIN .
  pr SID .
  pr CHOICE .
  pr LISTOFCHOICES .
  pr RAND .
  pr PMS .
  sort CFinish .

  op cfin : Prin Prin Sid ListOfChoices Choice Rand Rand Pms -> CFinish .
  op client : CFinish -> Prin .
  op server : CFinish -> Prin .
  op sid    : CFinish -> Sid .
  op list   : CFinish -> ListOfChoices .
  op choice : CFinish -> Choice .
  op crand  : CFinish -> Rand .
  op srand  : CFinish -> Rand .
  op pms    : CFinish -> Pms .

  var F : CFinish .
  var P Q : Prin .
  var I : Sid .
  var L : ListOfChoices .
  var C : Choice .
  var CR SR : Rand .
  var PMS : Pms .
  eq client(cfin(P,Q,I,L,C,CR,SR,PMS)) = P .
  eq server(cfin(P,Q,I,L,C,CR,SR,PMS)) = Q .
  eq sid(cfin(P,Q,I,L,C,CR,SR,PMS)) = I .
  eq list(cfin(P,Q,I,L,C,CR,SR,PMS)) = L .
  eq choice(cfin(P,Q,I,L,C,CR,SR,PMS)) = C .
  eq crand(cfin(P,Q,I,L,C,CR,SR,PMS)) = CR .
  eq srand(cfin(P,Q,I,L,C,CR,SR,PMS)) = SR .
  eq pms(cfin(P,Q,I,L,C,CR,SR,PMS)) = PMS .
endfm

view CFinish from TRIV to CFINISH is
    sort Elt to CFinish .
endv

fmod CFINISH-SOUP is
  pr SOUP{CFinish} .
endfm

fmod SFINISH is
  pr PRIN .
  pr SID .
  pr CHOICE .
  pr LISTOFCHOICES .
  pr RAND .
  pr PMS .
  sort SFinish .

  op sfin : Prin Prin Sid ListOfChoices Choice Rand Rand Pms -> SFinish .
  op client : SFinish -> Prin .
  op server : SFinish -> Prin .
  op sid    : SFinish -> Sid .
  op list   : SFinish -> ListOfChoices .
  op choice : SFinish -> Choice .
  op crand  : SFinish -> Rand .
  op srand  : SFinish -> Rand .
  op pms    : SFinish -> Pms .

  var F : SFinish .
  vars P Q : Prin .
  var I : Sid .
  var L : ListOfChoices .
  var C : Choice .
  vars CR SR : Rand .
  var PMS : Pms .
  eq client(sfin(P,Q,I,L,C,CR,SR,PMS)) = P .
  eq server(sfin(P,Q,I,L,C,CR,SR,PMS)) = Q .
  eq sid(sfin(P,Q,I,L,C,CR,SR,PMS)) = I .
  eq list(sfin(P,Q,I,L,C,CR,SR,PMS)) = L .
  eq choice(sfin(P,Q,I,L,C,CR,SR,PMS)) = C .
  eq crand(sfin(P,Q,I,L,C,CR,SR,PMS)) = CR .
  eq srand(sfin(P,Q,I,L,C,CR,SR,PMS)) = SR .
  eq pms(sfin(P,Q,I,L,C,CR,SR,PMS)) = PMS .
endfm

view SFinish from TRIV to SFINISH is
    sort Elt to SFinish .
endv

fmod SFINISH-SOUP is
  pr SOUP{SFinish} .
endfm

fmod CFINISH2 is
  pr PRIN .
  pr SID .
  pr CHOICE .
  pr RAND .
  pr PMS .
  sort CFinish2 .

  op cfin2 : Prin Prin Sid Choice Rand Rand Pms -> CFinish2 .
  op client : CFinish2 -> Prin .
  op server : CFinish2 -> Prin .
  op sid    : CFinish2 -> Sid .
  op choice : CFinish2 -> Choice .
  op crand  : CFinish2 -> Rand .
  op srand  : CFinish2 -> Rand .
  op pms    : CFinish2 -> Pms .

  var F : CFinish2 .
  vars P Q : Prin .
  var I : Sid .
  var C : Choice .
  vars CR SR : Rand .
  var PMS : Pms .
  eq client(cfin2(P,Q,I,C,CR,SR,PMS)) = P .
  eq server(cfin2(P,Q,I,C,CR,SR,PMS)) = Q .
  eq sid(cfin2(P,Q,I,C,CR,SR,PMS)) = I .
  eq choice(cfin2(P,Q,I,C,CR,SR,PMS)) = C .
  eq crand(cfin2(P,Q,I,C,CR,SR,PMS)) = CR .
  eq srand(cfin2(P,Q,I,C,CR,SR,PMS)) = SR .
  eq pms(cfin2(P,Q,I,C,CR,SR,PMS)) = PMS .
endfm

view CFinish2 from TRIV to CFINISH2 is
    sort Elt to CFinish2 .
endv

fmod CFINISH2-SOUP is
  pr SOUP{CFinish2} .
endfm

fmod SFINISH2 is
  pr PRIN .
  pr SID .
  pr CHOICE .
  pr RAND .
  pr PMS .
  sort SFinish2 .

  op sfin2 : Prin Prin Sid Choice Rand Rand Pms -> SFinish2 .
  op client : SFinish2 -> Prin .
  op server : SFinish2 -> Prin .
  op sid    : SFinish2 -> Sid .
  op choice : SFinish2 -> Choice .
  op crand  : SFinish2 -> Rand .
  op srand  : SFinish2 -> Rand .
  op pms    : SFinish2 -> Pms .

  var F : SFinish2 .
  vars P Q : Prin .
  var I : Sid .
  var C : Choice .
  vars CR SR : Rand .
  var PMS : Pms .
  eq client(sfin2(P,Q,I,C,CR,SR,PMS)) = P .
  eq server(sfin2(P,Q,I,C,CR,SR,PMS)) = Q .
  eq sid(sfin2(P,Q,I,C,CR,SR,PMS)) = I .
  eq choice(sfin2(P,Q,I,C,CR,SR,PMS)) = C .
  eq crand(sfin2(P,Q,I,C,CR,SR,PMS)) = CR .
  eq srand(sfin2(P,Q,I,C,CR,SR,PMS)) = SR .
  eq pms(sfin2(P,Q,I,C,CR,SR,PMS)) = PMS .
endfm

view SFinish2 from TRIV to SFINISH2 is
    sort Elt to SFinish2 .
endv

fmod SFINISH2-SOUP is
  pr SOUP{SFinish2} .
endfm

fmod ENCPMS is
  pr PMS .
  pr PUBLICKEY .
  sort EncPms .

  op epms : PubKey Pms -> EncPms .
  op k : EncPms -> PubKey .
  op pms : EncPms -> Pms .

  var PK : PubKey .
  var PMS : Pms .
  eq k(epms(PK,PMS)) = PK .
  eq pms(epms(PK,PMS)) = PMS .
endfm

view EncPms from TRIV to ENCPMS is
    sort Elt to EncPms .
endv

fmod ENCPMS-SOUP is
  pr SOUP{EncPms} .
endfm

fmod ENCCFIN is
  pr KEY .
  pr CFINISH .
  sort EncCFin .

  op ecfin : Key CFinish -> EncCFin .
  op k : EncCFin -> Key .
  op cfin : EncCFin -> CFinish .

  var K : Key .
  var F : CFinish .
  eq k(ecfin(K,F)) = K .
  eq cfin(ecfin(K,F)) = F .
endfm

view EncCFin from TRIV to ENCCFIN is
    sort Elt to EncCFin .
endv

fmod ENCCFIN-SOUP is
  pr SOUP{EncCFin} .
endfm

fmod ENCSFIN is
  pr KEY .
  pr SFINISH .
  sort EncSFin .

  op esfin : Key SFinish -> EncSFin .
  op k : EncSFin -> Key .
  op sfin : EncSFin -> SFinish .

  var K : Key .
  var F : SFinish .
  eq k(esfin(K,F)) = K .
  eq sfin(esfin(K,F)) = F .
endfm

view EncSFin from TRIV to ENCSFIN is
    sort Elt to EncSFin .
endv

fmod ENCSFIN-SOUP is
  pr SOUP{EncSFin} .
endfm

fmod ENCCFIN2 is
  pr KEY .
  pr CFINISH2 .
  sort EncCFin2 .

  op ecfin2 : Key CFinish2 -> EncCFin2 .
  op k : EncCFin2 -> Key .
  op cfin2 : EncCFin2 -> CFinish2 .

  var K : Key .
  var F : CFinish2 .
  eq k(ecfin2(K,F)) = K .
  eq cfin2(ecfin2(K,F)) = F .
endfm

view EncCFin2 from TRIV to ENCCFIN2 is
    sort Elt to EncCFin2 .
endv

fmod ENCCFIN2-SOUP is
  pr SOUP{EncCFin2} .
endfm

fmod ENCSFIN2 is
  pr KEY .
  pr SFINISH2 .
  sort EncSFin2 .

  op esfin2 : Key SFinish2 -> EncSFin2 .
  op k : EncSFin2 -> Key .
  op sfin2 : EncSFin2 -> SFinish2 .

  var K : Key .
  var F : SFinish2 .
  eq k(esfin2(K,F)) = K .
  eq sfin2(esfin2(K,F)) = F .
endfm

view EncSFin2 from TRIV to ENCSFIN2 is
    sort Elt to EncSFin2 .
endv

fmod ENCSFIN2-SOUP is
  pr SOUP{EncSFin2} .
endfm

fmod MSG is
    pr PRIN .
    pr RAND .
    pr CHOICE .
    pr LISTOFCHOICES .
    pr SID .
    pr PMS .
    pr CERTIFICATE .
    pr ENCPMS .
    pr ENCCFIN .
    pr ENCSFIN .
    pr ENCCFIN2 .
    pr ENCSFIN2 .

    sort Msg .

***        creator source dest  message body
***     ---------------------------------------------
  op ch  : Prin    Prin   Prin  Rand ListOfChoices -> Msg .
  op sh  : Prin    Prin   Prin  Rand Sid Choice    -> Msg .
  op ct  : Prin    Prin   Prin  Cert               -> Msg .
  op kx  : Prin    Prin   Prin  EncPms             -> Msg .
  op cf  : Prin    Prin   Prin  EncCFin             -> Msg .
  op sf  : Prin    Prin   Prin  EncSFin             -> Msg .
  op ch2 : Prin    Prin   Prin  Rand Sid           -> Msg .
  op sh2 : Prin    Prin   Prin  Rand Sid Choice    -> Msg .
  op cf2 : Prin    Prin   Prin  EncCFin2           -> Msg .
  op sf2 : Prin    Prin   Prin  EncSFin2           -> Msg .
  
  op crt : Msg -> Prin .
  op src : Msg -> Prin .
  op dst : Msg -> Prin .
  
  op rand : Msg -> Rand .
  op list : Msg -> ListOfChoices .
  op choice : Msg -> Choice .
  op sid  : Msg -> Sid .
  op cert : Msg -> Cert .
  op epms : Msg -> EncPms .
  op ecfin : Msg -> EncCFin .
  op esfin : Msg -> EncSFin .
  op ecfin2 : Msg -> EncCFin2 .
  op esfin2 : Msg -> EncSFin2 .
    
  op empty : -> Msg [ctor] .

  vars M M1 M2 : Msg .
  vars P P' Q  : Prin .
  var R : Rand .
  var L : ListOfChoices .
  var C : Choice .
  var I : Sid .
  var CERT : Cert .
  var EPMS : EncPms .
  var ECFIN : EncCFin .
  var ESFIN : EncSFin .
  var ECFIN2 : EncCFin2 .
  var ESFIN2 : EncSFin2 .
  
  eq crt(ch(P',P,Q,R,L))    = P' .
  eq crt(sh(P',P,Q,R,I,C))  = P' .
  eq crt(ct(P',P,Q,CERT))   = P' .
  eq crt(kx(P',P,Q,EPMS))   = P' .
  eq crt(cf(P',P,Q,ECFIN))   = P' .
  eq crt(sf(P',P,Q,ESFIN))   = P' .
  eq crt(ch2(P',P,Q,R,I))   = P' .
  eq crt(sh2(P',P,Q,R,I,C)) = P' .
  eq crt(cf2(P',P,Q,ECFIN2))  = P' .
  eq crt(sf2(P',P,Q,ESFIN2))  = P' .

  eq src(ch(P',P,Q,R,L))    = P .
  eq src(sh(P',P,Q,R,I,C))  = P .
  eq src(ct(P',P,Q,CERT))   = P .
  eq src(kx(P',P,Q,EPMS))   = P .
  eq src(cf(P',P,Q,ECFIN))   = P .
  eq src(sf(P',P,Q,ESFIN))   = P .
  eq src(ch2(P',P,Q,R,I))   = P .
  eq src(sh2(P',P,Q,R,I,C)) = P .
  eq src(cf2(P',P,Q,ECFIN2))  = P .
  eq src(sf2(P',P,Q,ESFIN2))  = P .

  eq dst(ch(P',P,Q,R,L))    = Q .
  eq dst(sh(P',P,Q,R,I,C))  = Q .
  eq dst(ct(P',P,Q,CERT))   = Q .
  eq dst(kx(P',P,Q,EPMS))   = Q .
  eq dst(cf(P',P,Q,ECFIN))   = Q .
  eq dst(sf(P',P,Q,ESFIN))   = Q .
  eq dst(ch2(P',P,Q,R,I))    = Q .
  eq dst(sh2(P',P,Q,R,I,C))  = Q .
  eq dst(cf2(P',P,Q,ECFIN2))  = Q .
  eq dst(sf2(P',P,Q,ESFIN2))  = Q .
  
  eq rand(ch(P',P,Q,R,L))    = R .
  eq rand(sh(P',P,Q,R,I,C))  = R .
  eq rand(ch2(P',P,Q,R,I))   = R .
  eq rand(sh2(P',P,Q,R,I,C)) = R .
  
  eq list(ch(P',P,Q,R,L))    = L .

  eq choice(sh(P',P,Q,R,I,C))  = C .
  eq choice(sh2(P',P,Q,R,I,C)) = C .

  eq sid(sh(P',P,Q,R,I,C))  = I .
  eq sid(ch2(P',P,Q,R,I))   = I .
  eq sid(sh2(P',P,Q,R,I,C)) = I .

  eq cert(ct(P',P,Q,CERT))   = CERT .

  eq epms(kx(P',P,Q,EPMS))   = EPMS .

  eq ecfin(cf(P',P,Q,ECFIN))   = ECFIN .

  eq esfin(sf(P',P,Q,ESFIN))   = ESFIN .

  eq ecfin2(cf2(P',P,Q,ECFIN2))  = ECFIN2 .

  eq esfin2(sf2(P',P,Q,ESFIN2))  = ESFIN2 .

endfm

view Msg from TRIV to MSG is
    sort Elt to Msg .
endv

fmod NETWORK is
  pr SOUP{Msg} .
  op _\in_ : Pms Soup{Msg} -> Bool .
  op _\in_ : Sig Soup{Msg} -> Bool .
  op _\in_ : EncPms Soup{Msg} -> Bool .
  op _\in_ : EncCFin Soup{Msg} -> Bool .
  op _\in_ : EncSFin Soup{Msg} -> Bool .
  op _\in_ : EncCFin2 Soup{Msg} -> Bool .
  op _\in_ : EncSFin2 Soup{Msg} -> Bool .

  vars P P' Q  : Prin .
  vars NW NW10 : Soup{Msg} .
  var M M2 : Msg .
  var PMS : Pms .
  var G : Sig .
  var PK : PubKey .
  var EPMS : EncPms .
  var ECFIN : EncCFin .
  var ESFIN : EncSFin .
  var ECFIN2 : EncCFin2 .
  var ESFIN2 : EncSFin2 .
  
  eq PMS \in kx(P',P,Q,epms(PK,PMS)) NW = true .
  eq PMS \in NW = false [owise] .
  
  eq G \in ct(P',P,Q,cert(P,k(P),G)) NW = true .
  eq G \in NW = false [owise] .
  
  eq EPMS \in kx(P',P,Q,EPMS) NW = true .
  eq EPMS \in NW = false [owise] .
  
  eq ECFIN \in cf(P',P,Q,ECFIN) NW = true .
  eq ECFIN \in NW = false [owise] .

  eq ESFIN \in sf(P',P,Q,ESFIN) NW = true .
  eq ESFIN \in NW = false [owise] .

  eq ECFIN2 \in cf2(P',P,Q,ECFIN2) NW = true .
  eq ECFIN2 \in NW = false [owise] .

  eq ESFIN2 \in sf2(P',P,Q,ESFIN2) NW = true .
  eq ESFIN2 \in NW = false [owise] .
endfm

fmod SESSIONSTATE is
    pr CHOICE .
    pr RAND .
    pr PMS .
    pr PRIN .
    pr SID .
    sort Session .

    op empty : -> Session [ctor] .

    op st : Choice Rand Rand Pms -> Session .
    op choice : Session -> Choice .
    op crand  : Session -> Rand .
    op srand  : Session -> Rand .
    op pms    : Session -> Pms .
    op ss : Prin Prin Sid -> Session .

    var S : Session .
    var C : Choice .
    vars CR SR : Rand .
    var PMS :  Pms .
    vars P Q : Prin .
    var I : Sid .
    eq choice(st(C,CR,SR,PMS)) = C .
    eq crand(st(C,CR,SR,PMS)) = CR .
    eq srand(st(C,CR,SR,PMS)) = SR .
    eq pms(st(C,CR,SR,PMS)) = PMS .
endfm

view Session from TRIV to SESSIONSTATE is
    sort Elt to Session .
endv

fmod SESSIONSTATE-SOUP is
  pr SOUP{Session} .
endfm

fmod OCOM is
  pr NETWORK .
  pr CHOICE-SOUP .
  pr LISTOFCHOICES-SOUP .
  pr RAND-SOUP .
  pr SID-SOUP .
  pr SESSIONSTATE-SOUP .
  pr SECRET-SOUP .
  pr PMS-SOUP .
  pr SIGNATURE-SOUP .
  pr ENCCFIN-SOUP .
  pr ENCSFIN-SOUP .
  pr ENCPMS-SOUP .
  pr ENCCFIN2-SOUP .
  pr ENCSFIN2-SOUP .
  pr PRIN-SOUP .
  sort OCom .

*** 7 kinds of info that intr tries to glean
  op cpms:_ : Soup{Pms} -> OCom [ctor] .
  op csig:_ : Soup{Sig} -> OCom [ctor] .
  op cepms:_ : Soup{EncPms} -> OCom [ctor] .
  op cecfin:_ : Soup{EncCFin} -> OCom [ctor] .
  op cesfin:_ : Soup{EncSFin} -> OCom [ctor] .
  op cecfin2:_ : Soup{EncCFin2} -> OCom [ctor] .
  op cesfin2:_ : Soup{EncSFin2} -> OCom [ctor] .

---   op newmsg:_ : Msg -> OCom [ctor] .
---   op ch:_ : Msg -> OCom [ctor] .
---   op sh:_ : Msg -> OCom [ctor] .
---   op ct:_ : Msg -> OCom [ctor] .
---   op kx:_ : Msg -> OCom [ctor] .
---   op cf:_ : Msg -> OCom [ctor] .
---   op sf:_ : Msg -> OCom [ctor] .
---   op ch2:_ : Msg -> OCom [ctor] .
---   op sh2:_ : Msg -> OCom [ctor] .
---   op cf2:_ : Msg -> OCom [ctor] .
---   op sf2:_ : Msg -> OCom [ctor] .
  op sst:_ : Session -> OCom [ctor] .
  op loc:_ : ListOfChoices -> OCom [ctor] .
  op choice:_ : Choice -> OCom [ctor] .
  op sec:_ : Secret -> OCom [ctor] .
  op sid:_ : Sid -> OCom [ctor] .
  op nw:_ : Soup{Msg} -> OCom [ctor] .
---   op nwch:_ : Soup{Msg} -> OCom [ctor] .
---   op nwsh:_ : Soup{Msg} -> OCom [ctor] .
---   op nwct:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwkx:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwcf:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwsf:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwch2:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwsh2:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwcf2:_ : Soup{Msg} -> OCom [ctor] . 
---   op nwsf2:_ : Soup{Msg} -> OCom [ctor] . 

  op rands:_ : Soup{Rand} -> OCom [ctor] .
  op uss:_ : Soup{Session} -> OCom [ctor] .
  op ur:_ : Soup{Rand} -> OCom [ctor] .
  op ui:_ : Soup{Sid} -> OCom [ctor] .
  op us:_ : Soup{Secret} -> OCom [ctor] .
  op prins:_ : Soup{Prin} -> OCom [ctor] .
endfm

view OCom from TRIV to OCOM is
    sort Elt to OCom .
endv

fmod OCOM-SOUP is
    pr SOUP{OCom} .
endfm

fmod CONFIG is
    pr OCOM-SOUP .
    sort Config .
    op {_} : Soup{OCom} -> Config [ctor] .
    op init : -> Config .
    eq init = {(cpms: emp) (csig: emp) (cepms: emp) (cecfin: emp) 
                (cesfin: emp) (cecfin2: emp) (cesfin2: emp)
                (nw: emp) (sst: empty)
                (loc: l) (choice: c) (sid: i) (sec: s)
                (ur: emp) (ui: emp) (us: emp) (uss: emp)
                (rands: (cr sr cr1 sr1)) 
                (prins: (a b intr ca))} .
endfm

mod TLS is
  inc CONFIG .
  vars MSG CH SH CT KX CF SF CH2 SH2 CF2 SF2 : Msg .

  vars NW NWCH NWSH NWCT NWKX NWCF NWSF NWCH2 NWSH2 NWCF2 NWSF2 : Soup{Msg} .

  vars R R' R1 R1' : Rand .
  var Rs : Soup{Rand} .

  vars A B A' B' A1 B1 A2 B2 Re : Prin .
  var Ps : Soup{Prin} .
  
  vars I I2 : Sid .
  var L : ListOfChoices .
  var C : Choice .
  var S : Secret .
  var PMS : Pms .
  var PK : PubKey .
  var G : Sig .
  var EPMS : EncPms .
  var ECFIN : EncCFin .
  var ESFIN : EncSFin .
  var ECFIN2 : EncCFin2 .
  var ESFIN2 : EncSFin2 .
  var SST : Session .

  var CPMS : Soup{Pms} .
  var CEPMS : Soup{EncPms} .
  var CSIG : Soup{Sig} .
  var CECFIN : Soup{EncCFin} .
  var CESFIN : Soup{EncSFin} .
  var CECFIN2 : Soup{EncCFin2} .
  var CESFIN2 : Soup{EncSFin2} .
  var UI : Soup{Sid} .
  var US : Soup{Secret} .
  var USS : Soup{Session} .
  var OCs : Soup{OCom} .

rl [chello] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: NW) (sst: SST)
    (sid: i) (loc: l) (choice: c) (sec: s)
    (ui: UI) (us: US) (ur: Rs) (uss: USS)
    (rands: (cr sr cr1 sr1))  
    (prins: (A B Ps))}
    =>
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (ch(A,A,B,cr,l) NW)) (sst: ss(A,B,i))  
    (sid: i) (loc: l) (choice: c) (sec: s)
    (ui: UI) (us: US) (ur: (cr Rs)) (uss: (ss(A,B,i) USS))
    (rands: (sr cr1 sr1))
    (prins: (A B Ps))} .

rl [shello] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (ch(A',A,B,R,L) NW)) (sst: SST)
    (sid: i) (loc: l) (choice: c)
    (ui: UI) (us: US) (ur: Rs) (uss: USS)
    (rands: (sr cr1 sr1))
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (sh(B,B,A,sr,i,c) ch(A',A,B,R,L) NW)) (sst: SST)
    (sid: i) (loc: l) (choice: c)
    (ui: (i UI)) (us: US) (ur: (sr Rs)) (uss: USS)
    (rands: (cr1 sr1))
    (prins: (A B Ps)) OCs} .

rl [cert] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (sh(B,B,A,R',I,C) ch(A,A,B,R,L) NW)) 
    (ui: UI) (us: US) (ur: Rs)
    (rands: Rs)
    (prins: (A B Ps)) OCs}
    =>
    {(cpms: CPMS) (csig: (sig(ca,B,k(B)) CSIG)) 
    (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (ct(B,B,A,cert(B,k(B),sig(ca,B,k(B)))) 
          sh(B,B,A,R',I,C) 
          ch(A,A,B,R,L) NW)) 
    (ui: UI) (us: US) (ur: Rs)
    (rands: Rs)
    (prins: (A B Ps)) OCs} .

rl [kexch] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (ct(B',B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW)) 
    (ui: UI) (us: US) (ur: Rs) (sec: s)
    (prins: (A B Ps)) OCs}                
    =>
    {(csig: CSIG) 
    (cecfin: CECFIN) (cesfin: CESFIN) 
    (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (kx(A,A,B,epms(PK,pms(A,B,s))) 
            ct(B',B,A,cert(B,PK,G)) 
            sh(B,B,A,R',I,C) 
            ch(A,A,B,R,L) NW)) 
    (cepms: (epms(PK,pms(A,B,s)) CEPMS)) 
    (cpms: (if (A == intr or B == intr) then (pms(A,B,s) CPMS) 
                                        else CPMS fi)) 
    (ui: UI) (us: (s US)) (ur: Rs) (sec: s)
    (prins: (A B Ps)) OCs} .  

rl [cfin] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (kx(A,A,B,epms(PK,PMS)) 
            ct(B,B,A,cert(B,PK,G)) 
            sh(B,B,A,R',I,C) 
            ch(A,A,B,R,L) NW)) 
    (ui: UI) (us: US) OCs}                
    =>
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) 
    (cecfin: (ecfin(k(A,PMS,R,R'),cfin(A,B,I,L,C,R,R',PMS)) CECFIN))  
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (cf(A,A,B,ecfin(k(A,PMS,R,R'),
            cfin(A,B,I,L,C,R,R',PMS)))
        kx(A,A,B,epms(PK,PMS)) 
        ct(B,B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW))
    (ui: UI) (us: US) OCs} .  

rl [sfin] :
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
    (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (cf(A,A,B,ecfin(k(A,PMS,R,R'),
            cfin(A,B,I,L,C,R,R',PMS)))
        kx(A,A,B,epms(PK,PMS)) 
        ct(B,B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW)) 
    (sst: SST)
    (ui: UI) (us: US) (uss: USS) OCs}                
    =>
    {(cpms: CPMS) (csig: CSIG) (cepms: CEPMS) 
    (cesfin: (esfin(k(B,PMS,R,R'),sfin(A,B,I,L,C,R,R',PMS)) CESFIN))  
    (cecfin: CECFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (nw: (sf(B,B,A,esfin(k(B,PMS,R,R'),
            sfin(A,B,I,L,C,R,R',PMS)))
        cf(A,A,B,ecfin(k(A,PMS,R,R'),
            cfin(A,B,I,L,C,R,R',PMS)))
        kx(A,A,B,epms(PK,PMS)) 
        ct(B,B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW))
    (sst: st(C,R,R',PMS))
    (ui: UI) (us: US) (uss: (st(C,R,R',PMS) USS)) OCs} .                   

rl [compl] :
    {(nw: (sf(B,B,A,esfin(k(B,PMS,R,R'),
            sfin(A,B,I,L,C,R,R',PMS)))
        cf(A,A,B,ecfin(k(A,PMS,R,R'),
            cfin(A,B,I,L,C,R,R',PMS)))
        kx(A,A,B,epms(PK,PMS)) 
        ct(B,B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW)) 
    (sst: SST) (uss: USS)
    (ui: UI) (us: US) OCs}                
    =>
    {(nw: (sf(B,B,A,esfin(k(B,PMS,R,R'),
            sfin(A,B,I,L,C,R,R',PMS)))
        cf(A,A,B,ecfin(k(A,PMS,R,R'),
            cfin(A,B,I,L,C,R,R',PMS)))
        kx(A,A,B,epms(PK,PMS)) 
        ct(B,B,A,cert(B,PK,G)) 
        sh(B,B,A,R',I,C) 
        ch(A,A,B,R,L) NW))
    (sst: st(C,R,R',PMS)) 
    (uss: (st(C,R,R',PMS) USS))
    (ui: UI) (us: US) OCs} .  

*** recheck
rl [chello2] :
    {(nw: NW) 
    (ui: (i UI)) (us: US) (ur: Rs) 
    (rands: (cr1 sr1)) 
    (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs}                
    =>
    {(nw: (ch2(A,A,B,cr1,i) NW)) 
    (ui: UI) (us: US) (ur: (cr1 Rs))
    (rands: sr1) 
    (sst: ss(A,B,i)) (uss: (ss(A,B,i) USS))
    (prins: (A B Ps)) OCs} .     

rl [shello2] :
    {(nw: (ch2(A,A,B,R1,I) NW)) (sst: SST)
    (ui: UI) (us: US) (choice: c)
    (ur: Rs) (rands: sr1) (uss: USS) OCs}                
    =>
    {(nw: (sh2(B,B,A,sr1,I,c) ch2(A,A,B,R1,I) NW)) (sst: SST) 
    (rands: emp) (ur: (sr1 Rs)) (choice: c)
    (ui: UI) (us: US) (uss: USS) OCs} .      

--- recheck
rl [cfin2] :
    {(cecfin2: CECFIN2) (cesfin2: CESFIN2) 
    (sec: s)
    (nw: (sh2(B,B,A,R1',I,C) ch2(A,A,B,R1,I) NW)) 
    (ui: UI) (us: US) (ur: Rs) OCs}                
    =>
    {(cesfin2: CESFIN2) 
    (cecfin2: (ecfin2(k(A,pms(A,B,s),R1,R1'),
                cfin2(A,B,I,C,R1,R1',pms(A,B,s))) CECFIN2))
    (sec: s)
    (nw: (cf2(A,A,B,ecfin2(k(A,pms(A,B,s),R1,R1'),
            cfin2(A,B,I,C,R1,R1',pms(A,B,s))))
        sh2(B,B,A,R1',I,C) 
        ch2(A,A,B,R1,I) NW))
    (ui: UI) (us: US) (ur: Rs) OCs} .

rl [sfin2] :
    {(cesfin2: CESFIN2) 
    (nw: (cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
            cfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        sh2(B,B,A,R1',I,C) 
        ch2(A,A,B,R1,I) NW))
    (sst: SST)
    (uss: USS) 
    OCs}                
    =>
    {(cesfin2: (esfin2(k(B,pms(A,B,S),R1,R1'),
                sfin2(A,B,I,C,R1,R1',pms(A,B,S))) CESFIN2)) 
    (nw: (sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),
            sfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
            cfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        sh2(B,B,A,R1',I,C) 
        ch2(A,A,B,R1,I) NW))
    (sst: st(C,R1,R1',pms(A,B,S))) 
    (uss: (st(C,R1,R1',pms(A,B,S)) USS))
    OCs} . 

rl [compl2] :
    {(nw: (sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),
            sfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
            cfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        sh2(B,B,A,R1',I,C) 
        ch2(A,A,B,R1,I) NW)) 
    (sst: SST) (uss: USS)    
    OCs}                
    =>
    {(nw: (sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),
            sfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
            cfin2(A,B,I,C,R1,R1',pms(A,B,S))))
        sh2(B,B,A,R1',I,C) 
        ch2(A,A,B,R1,I) NW)) 
    (sst: SST) (uss: USS)
    OCs} . 

rl [fakeChello] :
    {(nw: (ch(A,A,B,R,L) NW))
    (sst: SST) 
    (ui: UI) (us: US) (uss: USS)
    (ur: Rs) (prins: (A B Ps)) OCs}                
    =>
    {(nw: (ch(intr,A,B,R,L) 
            ch(A,A,B,R,L) NW))
    (sst: SST)  
    (ui: UI) (us: US) (uss: USS)
    (ur: Rs) (prins: (A B Ps)) OCs} .

rl [fakeShello] :
    {(nw: (sh(B,B,A,R',I,C) NW))  
    (sst: SST)
    (ui: UI) (us: US)
    (uss: USS)
    (ur: Rs) (prins: (A B Ps)) OCs}                
    =>
    {(nw: (sh(intr,B,A,R',I,C) 
            sh(B,B,A,R',I,C) NW)) 
    (sst: ss(B,A,I))
    (ui: UI) (us: US)
    (uss: (ss(B,A,I) USS))
    (ur: Rs) (prins: (A B Ps)) OCs} .

rl [fakeCert] :
    {(cpms: CPMS) (csig: (G CSIG)) 
    (cepms: CEPMS) (cecfin: CECFIN)
    (sst: SST) (uss: USS) (ui: (i UI))
    (nw: NW) (prins: (A B Ps)) OCs}                
    =>
    {(cpms: CPMS) (csig: (G CSIG)) 
    (cepms: CEPMS) (cecfin: CECFIN)
    (sst: ss(B,A,i)) (uss: (ss(B,A,i) USS))
    (nw: (ct(intr,B,A,cert(B,k(B),G)) NW)) 
    (prins: (A B Ps)) OCs} .

rl [fakeKexch1] :
    {(cpms: CPMS) (csig: CSIG) (cepms: (EPMS CEPMS))  
    (nw: NW) (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: CPMS) (csig: CSIG) (cepms: (EPMS CEPMS)) 
    (nw: (kx(intr,A,B,EPMS) NW)) 
    (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs} .

rl [fakeKexch2] :
    {(cpms: (PMS CPMS)) (csig: CSIG) (cepms: CEPMS)  
    (nw: NW) (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: (PMS CPMS)) (csig: CSIG) (cepms: CEPMS)  
    (nw: (kx(intr,A,B,epms(k(B),PMS)) NW)) 
    (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs} .

rl [fakeCfin1] :
    {(cecfin: (ECFIN CECFIN))
    (nw: NW) (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs}                
    =>
    {(cecfin: (ECFIN CECFIN)) 
    (nw: (cf(intr,A,B,ECFIN) NW))
    (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs} .

rl [fakeCfin2] :
    {(cpms: (PMS CPMS))
    (nw: NW) (sst: SST) (uss: USS)
    (sid: i) (loc: l) (choice: c)
    (ur: (cr sr Rs))
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: (PMS CPMS))
    (nw: (cf(intr,A,B,ecfin(k(A,PMS,cr,sr),
            cfin(A,B,i,l,c,cr,sr,PMS))) NW))
    (sst: ss(A,B,i)) (uss: (ss(A,B,i) USS))  
    (sid: i) (loc: l) (choice: c)
    (ur: (cr sr Rs))
    (prins: (A B Ps)) OCs} .

rl [fakeSfin1] :
    {(cesfin: (ESFIN CESFIN)) (cecfin2: CECFIN2) 
    (cesfin2: CESFIN2) (sst: SST) (uss: USS) (ui: (i UI))
    (nw: NW) (prins: (A B Ps)) OCs}                
    =>
    {(cesfin: (ESFIN CESFIN)) (cecfin2: CECFIN2) 
    (cesfin2: CESFIN2) 
    (sst: ss(B,A,i)) (uss: (ss(B,A,i) USS))
    (nw: (sf(intr,B,A,ESFIN) NW)) 
    (prins: (A B Ps)) OCs} .

rl [fakeSfin2] :
    {(cpms: (PMS CPMS))
    (sid: i) (loc: l) (choice: c) (sec: s)
    (ur: (cr sr Rs)) 
    (nw: NW) (sst: SST) (uss: USS)
    (prins: (A B Ps)) OCs}     
    =>
    {(cpms: (PMS CPMS)) 
    (sid: i) (loc: l) (choice: c) (sec: s)
    (ur: (cr sr Rs))
    (nw: (sf(intr,B,A,esfin(k(B,PMS,cr,sr),
            sfin(A,B,i,l,c,cr,sr,PMS))) NW)) 
    (sst: ss(B,A,i)) (uss: (ss(B,A,i) USS))
    (prins: (A B Ps)) OCs} .

rl [fakeChello2] :
    {(nw: (ch2(A,A,B,R1,I) NW))
    (sst: SST) (uss: USS) 
    OCs}                
    =>
    {(nw: (ch2(intr,A,B,R1,I) 
            ch2(A,A,B,R1,I) NW))
    (sst: ss(A,B,I)) (uss: (ss(A,B,I) USS))  
    OCs} .      

rl [fakeShello2] :
    {(nw: (sh2(B,B,A,R1',I,C) NW))
    (sst: SST) (uss: USS)  
    OCs}                
    =>
    {(nw: (sh2(intr,B,A,R1',I,C) 
            sh2(B,B,A,R1',I,C) NW))
    (sst: ss(B,A,I)) (uss: (ss(B,A,I) USS))   
    OCs} .

rl [fakeCfin21] :
    {(cecfin2: (ECFIN2 CECFIN2)) 
    (nw: NW) 
    (sst: SST) (uss: USS)  
    (prins: (A B Ps)) OCs}                
    =>
    {(cecfin2: (ECFIN2 CECFIN2)) 
    (nw: (cf2(intr,A,B,ECFIN2) NW))
    (sst: SST) (uss: USS)  
    (prins: (A B Ps)) OCs} .

rl [fakeCfin22] :
    {(cpms: (PMS CPMS))  
    (sid: i) (choice: c) (sec: s)
    (ur: (cr1 sr1 Rs))   
    (nw: NW) 
    (sst: SST) (uss: USS)  
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: (PMS CPMS)) 
    (sid: i) (choice: c) (sec: s)
    (ur: (cr1 sr1 Rs))    
    (nw: (cf2(intr,A,B,ecfin2(k(A,PMS,cr1,sr1),
            cfin2(A,B,i,c,cr1,sr1,PMS))) NW))
    (sst: SST) (uss: USS)  
    (prins: (A B Ps)) OCs} .

rl [fakeSfin21] :
    {(cesfin2: (ESFIN2 CESFIN2))
    (sst: SST) (uss: USS) (ui: (i UI))  
    (nw: NW) (prins: (A B Ps)) OCs}        
    =>
    {(cesfin2: (ESFIN2 CESFIN2))     
    (nw: (sf2(intr,B,A,ESFIN2) NW))
    (sst: ss(B,A,i)) (uss: (ss(B,A,i) USS))    
    (prins: (A B Ps)) OCs} .

rl [fakeSfin22] :
    {(cpms: (PMS CPMS)) 
    (sid: i) (choice: c) (ur: (cr1 sr1 Rs))   
    (nw: NW) 
    (sst: SST) (uss: USS)   
    (prins: (A B Ps)) OCs}                
    =>
    {(cpms: (PMS CPMS)) 
    (sid: i) (choice: c) (ur: (cr1 sr1 Rs))      
    (nw: (sf2(intr,B,A,esfin2(k(B,PMS,cr1,sr1),
            sfin2(A,B,i,c,cr1,sr1,PMS))) NW))
    (sst: ss(B,A,i)) (uss: (ss(B,A,i) USS))   
    (prins: (A B Ps)) OCs} .
endm
eof
*** us - used secrets
*** uss - used session states between two principals
*** ss(a,b,i) denotes the principal a’s session state 
    --- identified by session ID i with principal b in the state.

*** search
search [1,5] in TLS : init =>* {(cpms: (pms(A,B,S) CPMS)) OCs} such that not(A == intr or B == intr) .

search [1,5] in TLS : init =>* {(cepms: (EPMS CEPMS)) OCs} such that (owner(k(EPMS)) == intr) .

search [1,5] in TLS : init =>* {(nw: (sf(B',B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) OCs}
such that not ((A =/= intr) implies sf(B',B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) \in (sf(B',B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) .

search [1,5] in TLS : init =>* {(cesfin: (esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S))) CESFIN)) (nw: NW) OCs}
such that not ((A =/= intr) implies (sf(B,B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) \in NW)) .

search [1,5] in TLS : init =>* {(nw: (sf2(B',B,A,esfin2(k(B,pms(A,B,S),R1,R1'),sfin2(A,B,I,C,R1,R1',pms(A,B,S)))) NW)) OCs}
such that not ((A =/= intr) implies sf2(B',B,A,esfin2(k(B,pms(A,B,S),R1,R1'),sfin2(A,B,I,C,R1,R1',pms(A,B,S)))) \in NW) .

search [1,5] in TLS : init =>* {(cesfin2: (esfin2(k(B,pms(A,B,S),R1,R1'),sfin2(A,B,I,C,R1,R1',pms(A,B,S))) CESFIN2)) (nw: NW) OCs}
such that not ((A =/= intr) implies (sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),sfin2(A,B,I,C,R1,R1',pms(A,B,S)))) \in NW)) .

search [1,5] in TLS : init =>* {(nw: (sf(B,B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) OCs}
such that not ((A =/= intr and B =/= intr) implies sh(B,B,A,R',I,C) \in NW) .

search [1,5] in TLS : init =>* {(nw: (sf(B,B,A,esfin(k(B,pms(A,B,S),R,R'),sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) OCs}
such that not ((A =/= intr and B =/= intr) implies ct(B,B,A,cert(B,k(B),sig(ca,B,k(B)))) \in NW) .

search [1,5] in TLS : init =>* {(csig: (sig(ca,A,PK) CSIG)) OCs} such that not(PK == k(A)) .
--- this is inv9.


--- {(newmsg: (if C \in list(ch(A',A,B,R,L)) then sh(B,B,A,sr,I,C) else MSG fi))
---     (sh: (if C \in list(ch(A',A,B,R,L)) then sh(B,B,A,sr,I,C) else SH fi)) 
---     (ss: (A2,B2,I2))
---     (cpms: CPMS) (csig: CSIG) (cepms: CEPMS) (cecfin: CECFIN)
---     (cesfin: CESFIN) (cecfin2: CECFIN2) (cesfin2: CESFIN2) 
---     (nwsh: (if C \in list(ch(A',A,B,R,L)) then (sh(B,B,A,sr,I,C) NWSH) else NWSH fi)) 
---     (nw: (if C \in list(ch(A',A,B,R,L)) then (sh(B,B,A,sr,I,C) ch(A',A,B,R,L) NW) 
---                                         else (ch(A',A,B,R,L) NW) fi)) 
---     
---     (ui: (I UI)) (us: US)
---     (rands: Rs) (ur: (cr Rs)) 
---     (prins: (A B Ps)) OCs}  


*** fakeCfin2
---     {(cpms: (PMS CPMS))
---     (nw: (cf(A,A,B,ecfin(k(A,pms(A,B,S),R,R'),
---             cfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW))
---     (prins: (A B Ps)) OCs}                
---     =>
---     {(cpms: (PMS CPMS))
---     (nw: (cf(intr,A,B,ecfin(k(A,PMS,R,R'),
---             cfin(A,B,I,L,C,R,R',PMS))) 
---         cf(A,A,B,ecfin(k(A,pms(A,B,S),R,R'),
---             cfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) 
---     (prins: (A B Ps)) OCs} .
--- recheck, if intr has pms, can fake msg, cf msg is not required in nw


*** fakeSfin2
--- {(cpms: (PMS CPMS))    
    --- (nw: (sf(B,B,A,esfin(k(B,pms(A,B,S),R,R'),
    ---         sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) OCs}                
    --- =>
    --- {(cpms: (PMS CPMS))    
    --- (nw: (sf(intr,B,A,esfin(k(B,PMS,R,R'),
    ---         sfin(A,B,I,L,C,R,R',PMS))) sf(B,B,A,esfin(k(B,pms(A,B,S),R,R'),
    ---         sfin(A,B,I,L,C,R,R',pms(A,B,S)))) NW)) 
    ---  OCs} .
--- recheck, if intr has pms, can fake msg, cf msg is not required in nw

*** fakeCfin22
--- {(cpms: (PMS CPMS))    
    --- (nw: (cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
    ---             cfin2(A,B,I,C,R1,R1',pms(A,B,S)))) NW)) OCs}                
    --- =>
    --- {(cpms: (PMS CPMS))    
    --- (nw: (cf2(intr,A,B,ecfin2(k(A,PMS,R1,R1'),
    ---         cfin2(A,B,I,C,R1,R1',PMS))) cf2(A,A,B,ecfin2(k(A,pms(A,B,S),R1,R1'),
    ---             cfin2(A,B,I,C,R1,R1',pms(A,B,S)))) NW)) 
    ---  OCs} .
--- recheck, if intr has pms, can fake msg, cf msg is not required in nw

*** fakeSfin22
--- {(cpms: (PMS CPMS))    
    --- (nw: (sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),
    ---             sfin2(A,B,I,C,R1,R1',pms(A,B,S)))) NW)) 
    --- OCs}                
    --- =>
    --- {(cpms: (PMS CPMS))    
    --- (nw: (sf2(intr,B,A,esfin2(k(B,PMS,R1,R1'),
    ---         sfin2(A,B,I,C,R1,R1',PMS))) 
    ---     sf2(B,B,A,esfin2(k(B,pms(A,B,S),R1,R1'),
    ---             sfin2(A,B,I,C,R1,R1',pms(A,B,S)))) NW)) 
    ---  OCs} .
--- recheck, if intr has pms, can fake msg, cf msg is not required in nw