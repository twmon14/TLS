open INV .
  :id(tls)
  op p : -> Protocol .
  ops a b b1 : -> Prin .
  ops r1 r2 : -> Rand .
  op l : -> ListOfChoices .
  op c : -> Choice .
  op i : -> Sid .
  op s : -> Secret .
-- arbitrary objects
  op p2 : -> Prin .
  ops m1 m2 : -> Msg .
-- assumptions
  eq b = intruder .
  eq b1 = intruder .
  red inv12(p,a,b,b1,r1,r2,l,c,i,s) .
close

open INV .
  :id(tls)
  op p : -> Protocol .
  ops a b b1 : -> Prin .
  ops r1 r2 : -> Rand .
  op l : -> ListOfChoices .
  op c : -> Choice .
  op i : -> Sid .
  op s : -> Secret .
-- arbitrary objects
  op p2 : -> Prin .
  ops m1 m2 : -> Msg .
-- assumptions
  eq b = intruder .
  eq (b1 = intruder) = false .
  red inv10(p,a,b1,r2,c,i) implies inv12(p,a,b,b1,r1,r2,l,c,i,s) .
close

open INV .
  :id(tls)
  op p : -> Protocol .
  ops a b b1 : -> Prin .
  ops r1 r2 : -> Rand .
  op l : -> ListOfChoices .
  op c : -> Choice .
  op i : -> Sid .
  op s : -> Secret .
-- arbitrary objects
  op p2 : -> Prin .
  ops m1 m2 : -> Msg .
-- assumptions
  eq (b = intruder) = false .
  eq a = intruder .
  red inv12(p,a,b,b1,r1,r2,l,c,i,s) .
close

open INV .
  :id(tls)
  op p : -> Protocol .
  ops a b b1 : -> Prin .
  ops r1 r2 : -> Rand .
  op l : -> ListOfChoices .
  op c : -> Choice .
  op i : -> Sid .
  op s : -> Secret .
-- arbitrary objects
  op p2 : -> Prin .
  ops m1 m2 : -> Msg .
-- assumptions
  eq (b = intruder) = false .
  eq (a = intruder) = false .
  red inv7(p,a,b,r1,r2,l,c,i,s) implies inv12(p,a,b,b1,r1,r2,l,c,i,s) .
close

open INV .
  :proof(tls)
close

-- script
open INV .
	:goal{
		eq [tls :nonexec] : inv12(P:Protocol,P:Prin,P1:Prin,P0:Prin,R:Rand,R0:Rand,L:ListOfChoices,C:Choice,S:Sid,S:Secret) = true .
	}

	:apply(tc)

	:def csb1 = :ctf {eq P1@Prin  = intruder .}

	:apply(csb1)

	:def csb2 = :ctf {eq P0@Prin  = intruder .}

	:apply(csb2)

	:apply (rd)

	:postpone .

	:def csb3 = :ctf {eq P@Prin  = intruder .}

	:apply(csb3)

	:apply (rd)

	:postpone .


close

